name: Release Workflow
run-name: ${{ (github.event.release.prerelease && 'Beta') || 'Prod'}} Release for ${{ github.repository }} - ${{ github.event.release.tag_name }}
on:
  release:
    # Triggered on Pre-Releases and Releases
    types: [released, prereleased]

# Only allow one release at the time
concurrency:
  group: deploy-${{ github.repository }}-release-${{ github.event.release.prerelease }}

jobs:
  define-environment:
    name: Define Environment
    runs-on: ubuntu-latest
    if: (!github.event.release.draft)
    outputs:
      deployment_environment: ${{ steps.get-environment.outputs.deployment_environment }}
      deployment_longname: ${{ steps.get-environment.outputs.deployment_longname }}
      deployment_version: ${{ steps.get-environment.outputs.deployment_version }}
    steps:
      - name: Configure Environment
        id: get-environment
        run: |
          wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /usr/local/bin/semver
          if [[ $(semver validate ${{ github.event.release.tag_name }}) == "invalid" ]]; then
            echo "::error title=Invalid Release::Release must be tagged with a valid SemVer version"
            exit 1
          fi
          TAG=${{ github.event.release.tag_name }}
          echo "deployment_version=${TAG#v}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            echo "::notice title=Deployment Environment::Deployment for Test"
            echo "deployment_environment=-rc" >> $GITHUB_OUTPUT
            echo "deployment_longname=Beta" >> $GITHUB_OUTPUT
          else
            echo "::notice title=Deployment Environment::Deployment for Prod"
            echo "deployment_environment=" >> $GITHUB_OUTPUT
            echo "deployment_longname=Prod" >> $GITHUB_OUTPUT
          fi

  publish-docker:
    name: Publish docker image for ${{ needs.define-environment.outputs.deployment_longname }}
    needs: [define-environment]
    environment: 
      name: dockerhub
      url: ${{ steps.set-output-url.outputs.deployment_dockerhub_url }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: step-security/harden-runner@v2
        with:
          disable-sudo: false
          egress-policy: audit
      
      - uses: actions/checkout@v4
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-v1.0-ethereum-contracts-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-v1.0-ethereum-contracts-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create invalid keystore and signer_key
        run: |
          touch keystore
          touch signer_key.pem

      - name: Build and push the images
        run: |
          docker buildx bake \
            --set "*.cache-from=type=local,src=/tmp/.buildx-cache" \
            --set "*.cache-to=type=local,dest=/tmp/.buildx-cache-new" \
            --set "*.platform=linux/amd64" \
            --builder ${{ steps.buildx.outputs.name }} \
            --push \
            -f docker-compose.yml \
            eth
        env:
          PANTOS_VERSION: ${{ needs.define-environment.outputs.deployment_version }}
          DOCKER_TAG: ${{ github.event.release.tag_name }}${{ needs.define-environment.outputs.deployment_environment }}

      - name: Set output url
        id: set-output-url
        run: |
          echo "deployment_dockerhub_url=https://hub.docker.com/r/pantosio/ethereum-contracts/tags?name=${{ github.event.release.tag_name }}${{ needs.define-environment.outputs.deployment_environment }}" >> $GITHUB_OUTPUT

      - uses: sigstore/cosign-installer@main

      - name: Sign the images
        run: |
          for app in $(docker buildx bake -f docker-compose.yml --print --progress "plain" | jq -r '.target[].tags | add'); do
            for image in $(docker buildx imagetools inspect $app --raw | jq -r '.manifests[].digest'); do
              echo "Signing $image from $app";
              cosign sign --yes --verbose "${app%%:*}@$image";
            done;
          done;
        env:
          DOCKER_TAG: ${{ github.event.release.tag_name }}${{ needs.define-environment.outputs.deployment_environment }}
          COSIGN_EXPERIMENTAL: "true"
